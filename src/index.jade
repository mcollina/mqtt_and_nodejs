doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title MQTT and Node.js

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel="stylesheet", type='text/css', href="bower_components/font-awesome/css/font-awesome.min.css")
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section
        h1 MQTT and Node.js
        h3 Messaging in the Internet of Things
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a>
        img(src="images/cc_sa.png")

      section.full-imgs
        img(src="images/mqttorg.svg")

      section
        h2 MQTT
        ul
          li publish/subscribe protocol
          li multiple quality of service level..
          li ..with at-least-once and exactly-once semantics
          li low overhead (2 bytes at minimum)
          li offline messaging
          li retained messages, like a key/value store

      section.full-imgs
        h2 MQTT
        img(src="images/pubsub.png")

      section(data-bespoke-state='all-black').full-imgs
        img(src="images/node.svg")
        ul.bullet
          li Small core, vibrant community
          li Extreme modularity
          li Reimplement everything in Javascript

      section(data-bespoke-state='all-black')
        h2 Why Node.js matters?
        ul.bullet
          li high performance (2x at Paypal)
          li faster application development (2x at PayPal)
          li batteries not included
          li go check out &nbsp;
            a(href="http://www.nearform.com/nodecrunch/node-js-becoming-go-technology-enterprise") http://www.nearform.com/nodecrunch/node-js-becoming-go-technology-enterprise

      section(data-bespoke-state='batteries')
        img(src="images/npm.png")
        ul.bullet
          li Almost 70.000 modules
          li 3.685.510 module downloaded per day
          li Exponential growth
          li Permissive licenses
          li How to spot a good module?
        .copyright
          a(href="http://500px.com/photo/64986565", style="color: white") http://500px.com/photo/64986565 &nbsp;
          a(href="http://creativecommons.org/licenses/by/3.0/deed.en_us")
            img(src="images/cc_attribution.png")

      section
        h2 MQTT.js
        ul
          li 20k packets/second parser
          li Stream based
          li High-Level Client API
          li Low-Level Server
          li Build with&nbsp;
            i.fa.fa-heart
            | &nbsp;by&nbsp;
            a(href="http://github.com/adamvr") @adamvr
            | &nbsp;and&nbsp;
            a(href="http://github.com/mcollina") @mcollina

      section
        h2 Instant Gratification
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient();

            client.subscribe("mqtt/demo");

            client.on("message", function(topic, payload) {
              alert([topic, payload].join(": "));
              client.end();
            });

            client.publish("mqtt/demo", "hello world!");

      section
        h2 Pattern Matching
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient();

            client.subscribe("mqtt/+");

            client.on("message", function(topic, payload) {
              alert([topic, payload].join(": "));
              client.end();
            });

            client.publish("mqtt/demo", "hello world!");

      section
        h2 Mosca
        h3 MQTT broker in Node.js
        ul
          li
            a(href="http://npm.im/mosca") http://npm.im/mosca
          li Standalone usage, through `$ mosca`
          li Embeddable in your app
          li Authentication APIs
          li Supports AMQP, Mongo, Redis, and MQTT as pub/sub backends
          li Needs a DB, such as LevelDB, Mongo, or Redis
          li Support websockets
          li Fast, 10k+ messages routed per second
          li Scalable, 10k+ concurrent connections

      section
        h2 How can it work on a Browser?
        ul
          li Works on top of WebSocket
          li Node.js excels at that :)
          li MQTT over Websocket is 'standard'
          li uses test broker at test.mosca.io
          li Thanks to&nbsp;
            a(href="http://github.com/substack") @substack
            | &nbsp;for Browserify

      section
        h2 Benchmark
        img(src="images/moscabench.svg")

      section
        h2 Offline Mode
        h3 First, subscribe with QoS 1 and disconnect
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient({
              clientId: "moscaslides",
              clean: false
            });

            client.subscribe("mqtt/offline", { qos: 1 },
              function() {

              alert("subscribe done!");
              // called when the subscribe is successful
              client.end();
            });

      section
        h2 Offline Mode
        h3 Then, someone else publish an important message
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient();

            client.publish("mqtt/offline", "hello world!", {qos:1},
              function() {

              alert("publish done!");
              client.end();
            });

      section
        h2 Offline Mode
        h3 Reconnect to receive the missed messages
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient({
              clientId: "moscaslides",
              clean: false
            });

            client.on("message", function(topic, payload) {
              alert([topic, payload.toString()].join(": "));

              setTimeout(client.end.bind(client), 1000);
            });

      section
        h2 Does Offline Mode Scale?
        img(src="images/moscavsmosquitto.svg")

      section.full-imgs
        h2 Do you need a REST API?
        ul
          li Check out&nbsp;
            a(href="http://eclipse.org/ponte") Ponte
            | &nbsp;at&nbsp;
            a(href="http://eclipse.org/ponte") http://eclipse.org/ponte

          li $ npm install ponte -g

          li
            a(href="http://eclipse.org/ponte")
              img(src="images/ponte.png")

      section
        h2 Ponte API
        ul
          li http://&#60;your ponte&#62;/resources/&#60;your thing&#62;
          li coap://&#60;your ponte&#62;/r/&#60;your thing&#62;
          li mqtt(s)://&#60;your ponte&#62;/&#60;your thing&#62;

      section.full-imgs
        img(src='images/me.png')
        h3
          a(href='http://github.com/mcollina') http://github.com/mcollina

      section
        h1 Thanks!
        br
        p If you need help with node.js:
        br
        h3 <a href="mailto:hello@matteocollina.com">hello@matteocollina.com</a>
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a> on Twitter
        h3 <a href="http://www.matteocollina.com">www.matteocollina.com</a>

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-run/dist/bespoke-run.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/bundle.js')
    script(src='scripts/main.js')
    // endbuild

    script.
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-49951933-1', 'mcollina.github.io');
      ga('send', 'pageview');
